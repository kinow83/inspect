!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CUR_VERSION	parser.h	7;"	d
ConfigList	parser.c	/^config_list_t *ConfigList;$/;"	v
IS_MCAST_IP	format.h	49;"	d
IS_MCAST_IP	format.h	55;"	d
LOG_STR	log.c	/^static const char *LOG_STR[] = {$/;"	v	file:
L_ALL	log.h	12;"	d
L_DEBUG	log.h	11;"	d
L_ERROR	log.h	9;"	d
L_FATAL	log.h	8;"	d
L_INFO	log.h	10;"	d
MACUINT64	format.h	36;"	d
MAC_BCAST	format.h	12;"	d
MAC_NULL	format.h	11;"	d
SNP	format.h	9;"	d
VTC_BLUE	log.c	47;"	d	file:
VTC_BOLD	log.c	51;"	d	file:
VTC_GREEN	log.c	49;"	d	file:
VTC_RED	log.c	48;"	d	file:
VTC_RESET	log.c	52;"	d	file:
VTC_YELLOW	log.c	50;"	d	file:
_FORMAT_H_	format.h	2;"	d
_IP_FMT_	format.h	44;"	d
_IP_FMT_FILL_	format.h	46;"	d
_IP_FMT_FILL_	format.h	52;"	d
_LOG_H_	log.h	3;"	d
_MAC_FMT_	format.h	28;"	d
_MAC_FMT_FILL_	format.h	29;"	d
_PARSER_	parser.h	3;"	d
action	parser.h	/^	struct action_t *action;$/;"	m	struct:config_t	typeref:struct:config_t::action_t
action_t	parser.h	/^typedef struct action_t {$/;"	s
action_t	parser.h	/^} action_t;$/;"	t	typeref:struct:action_t
channel	parser.h	/^	uint8_t channel;$/;"	m	struct:action_t
config_list_t	parser.h	/^typedef struct config_list_t {$/;"	s
config_list_t	parser.h	/^} config_list_t;$/;"	t	typeref:struct:config_list_t
config_operation_t	parser.h	/^typedef struct config_operation_t {$/;"	s
config_operation_t	parser.h	/^} config_operation_t;$/;"	t	typeref:struct:config_operation_t
config_t	parser.h	/^typedef struct config_t  {$/;"	s
config_t	parser.h	/^} config_t;$/;"	t	typeref:struct:config_t
console_debug	log.c	/^static void console_debug(const char *fmt, ...) {$/;"	f	file:
console_error	log.c	/^static void console_error(const char *fmt, ...) {$/;"	f	file:
console_fatal	log.c	/^static void console_fatal(const char *fmt, ...) {$/;"	f	file:
console_hex_debug	log.c	/^static void console_hex_debug(uint8_t *hex, size_t len, const char *fmt, ...) {$/;"	f	file:
console_hex_error	log.c	/^static void console_hex_error(uint8_t *hex, size_t len, const char *fmt, ...) {$/;"	f	file:
console_hex_fatal	log.c	/^static void console_hex_fatal(uint8_t *hex, size_t len, const char *fmt, ...) {$/;"	f	file:
console_hex_info	log.c	/^static void console_hex_info(uint8_t *hex, size_t len, const char *fmt, ...) {$/;"	f	file:
console_info	log.c	/^static void console_info(const char *fmt, ...) {$/;"	f	file:
console_log	log.c	/^static void console_log(int lv, const char *fmt, va_list ap, $/;"	f	file:
cv_arr_def	parser.h	18;"	d
cv_def	parser.h	12;"	d
cv_disable	parser.h	28;"	d
cv_disable	parser.h	31;"	d
cv_enable	parser.h	25;"	d
cv_enabled	parser.h	22;"	d
d	log.h	/^	void (*d)(const char *fmt, ...);$/;"	m	struct:log_ctx
data	parser.h	/^	uint8_t *data;$/;"	m	struct:tag_t
debug	parser.h	/^	void (*debug)(struct config_t *);$/;"	m	struct:config_operation_t
dwell	parser.h	/^	uint32_t dwell;$/;"	m	struct:action_t
e	log.h	/^	void (*e)(const char *fmt, ...);$/;"	m	struct:log_ctx
echo	log.c	/^struct log_ctx echo = {$/;"	v	typeref:struct:log_ctx
enable	parser.h	/^	uint8_t enable;$/;"	m	struct:action_t
entry	parser.h	/^	struct config_operation_t entry;$/;"	m	struct:config_list_t	typeref:struct:config_list_t::config_operation_t
f	log.h	/^	void (*f)(const char *fmt, ...);$/;"	m	struct:log_ctx
free_action	parser.c	/^static void free_action(action_t *action) {$/;"	f	file:
free_config	parser.c	/^static void free_config(config_t *config) {$/;"	f	file:
hd	log.h	/^	void (*hd)(uint8_t *hex, size_t len, const char *fmt, ...);$/;"	m	struct:log_ctx
he	log.h	/^	void (*he)(uint8_t *hex, size_t len, const char *fmt, ...);$/;"	m	struct:log_ctx
hf	log.h	/^	void (*hf)(uint8_t *hex, size_t len, const char *fmt, ...);$/;"	m	struct:log_ctx
hi	log.h	/^	void (*hi)(uint8_t *hex, size_t len, const char *fmt, ...);$/;"	m	struct:log_ctx
i	log.h	/^	void (*i)(const char *fmt, ...);$/;"	m	struct:log_ctx
init_config	parser.c	/^void init_config() {$/;"	f
len	parser.h	/^	uint8_t len;$/;"	m	struct:tag_t
load	parser.h	/^	struct config_t* (*load)(const char *);$/;"	m	struct:config_operation_t	typeref:struct:config_operation_t::load
log_ctx	log.h	/^struct log_ctx {$/;"	s
log_level	log.c	/^int log_level = L_ALL;$/;"	v
mac_cmp	format.h	17;"	d
mac_cmp_bcast	format.h	18;"	d
mac_cmp_null	format.h	19;"	d
mac_copy	format.h	21;"	d
mac_copy_bcast	format.h	22;"	d
mac_copy_null	format.h	23;"	d
mac_t	format.h	/^typedef uint8_t mac_t[6];$/;"	t
main	test.c	/^int main()$/;"	f
name	parser.h	/^	char *name;$/;"	m	struct:action_t
name	parser.h	/^	char *name;$/;"	m	struct:config_operation_t
next	parser.h	/^	struct action_t *next;$/;"	m	struct:action_t	typeref:struct:action_t::action_t
next	parser.h	/^	struct config_list_t *next;$/;"	m	struct:config_list_t	typeref:struct:config_list_t::config_list_t
next	parser.h	/^	struct tag_t *next;$/;"	m	struct:tag_t	typeref:struct:tag_t::tag_t
no	parser.h	/^	uint32_t no;				\/\/ sequence number$/;"	m	struct:action_t
oui_t	format.h	/^typedef uint8_t oui_t[3];$/;"	t
register_config	parser.c	/^void register_config(const char *name, config_operation *config_op) {$/;"	f
tag	parser.h	/^	uint8_t tag;$/;"	m	struct:tag_t
tag_t	parser.h	/^typedef struct tag_t {$/;"	s
tag_t	parser.h	/^} tag_t;$/;"	t	typeref:struct:tag_t
tags	parser.h	/^	struct tag_t *tags;$/;"	m	struct:action_t	typeref:struct:action_t::tag_t
version	parser.h	/^	uint32_t version;$/;"	m	struct:config_t
xml_action_parser	xml_parser.c	/^static action_t *xml_action_parser(ezxml_t xml) {$/;"	f	file:
