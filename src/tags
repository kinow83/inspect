!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Action_t	parser.h	/^typedef struct Action_t {$/;"	s
Action_t	parser.h	/^} Action_t;$/;"	t	typeref:struct:Action_t
CUR_VERSION	parser.h	6;"	d
ConfigModules	parser.c	/^Config_module_t *ConfigModules;$/;"	v
Config_module_t	parser.h	/^typedef struct Config_module_t {$/;"	s
Config_module_t	parser.h	/^} Config_module_t;$/;"	t	typeref:struct:Config_module_t
Config_t	parser.h	/^typedef struct Config_t  {$/;"	s
Config_t	parser.h	/^} Config_t;$/;"	t	typeref:struct:Config_t
IS_MCAST_IP	format.h	49;"	d
IS_MCAST_IP	format.h	55;"	d
LOG_STR	log.c	/^static const char *LOG_STR[] = {$/;"	v	file:
L_ALL	log.h	12;"	d
L_DEBUG	log.h	11;"	d
L_ERROR	log.h	9;"	d
L_FATAL	log.h	8;"	d
L_INFO	log.h	10;"	d
Load_func_t	parser.h	/^typedef Config_t* (*Load_func_t)(const char *, void *);$/;"	t
MACUINT64	format.h	36;"	d
MAC_BCAST	format.h	12;"	d
MAC_NULL	format.h	11;"	d
MatchModules	match.c	/^Match_module_t *MatchModules;$/;"	v
Match_func_t	match.h	/^typedef Config_t (*Match_func_t)(Config_t *, void *, void *);$/;"	t
Match_module_t	match.h	/^typedef struct Match_module_t {$/;"	s
Match_module_t	match.h	/^} Match_module_t;$/;"	t	typeref:struct:Match_module_t
OutputModules	output.c	/^Output_module_t *OutputModules;$/;"	v
Output_func_t	output.h	/^typedef void (*Output_func_t)(Config_t *, void *);$/;"	t
Output_module_t	output.h	/^typedef struct Output_module_t {$/;"	s
Output_module_t	output.h	/^} Output_module_t;$/;"	t	typeref:struct:Output_module_t
SNP	format.h	9;"	d
Tag_t	parser.h	/^typedef struct Tag_t {$/;"	s
Tag_t	parser.h	/^} Tag_t;$/;"	t	typeref:struct:Tag_t
VTC_BLUE	log.c	48;"	d	file:
VTC_BOLD	log.c	52;"	d	file:
VTC_GREEN	log.c	50;"	d	file:
VTC_RED	log.c	49;"	d	file:
VTC_RESET	log.c	53;"	d	file:
VTC_YELLOW	log.c	51;"	d	file:
_ALLOCATE_	alloc.h	2;"	d
_FORMAT_H_	format.h	2;"	d
_IP_FMT_	format.h	44;"	d
_IP_FMT_FILL_	format.h	46;"	d
_IP_FMT_FILL_	format.h	52;"	d
_LOG_H_	log.h	3;"	d
_MAC_FMT_	format.h	28;"	d
_MAC_FMT_FILL_	format.h	29;"	d
_MATCH_MODULES_	match.h	2;"	d
_OUTPUT_MODULES_	output.h	2;"	d
_PARSER_	parser.h	2;"	d
_calloc_1_	alloc.c	/^inline void *_calloc_1_(size_t size)$/;"	f
action	parser.h	/^	struct Action_t *action;$/;"	m	struct:Config_t	typeref:struct:Config_t::Action_t
action_name	parser.h	/^	char *action_name;$/;"	m	struct:Action_t
alloc1	alloc.h	6;"	d
channel	parser.h	/^	uint8_t channel;$/;"	m	struct:Action_t
config_name	parser.h	/^	char *config_name;                    \/\/ config module name.$/;"	m	struct:Config_module_t
console_debug	log.c	/^static void console_debug(const char *fmt, ...) {$/;"	f	file:
console_error	log.c	/^static void console_error(const char *fmt, ...) {$/;"	f	file:
console_fatal	log.c	/^static void console_fatal(const char *fmt, ...) {$/;"	f	file:
console_hex_debug	log.c	/^static void console_hex_debug(uint8_t *hex, size_t len, const char *fmt, ...) {$/;"	f	file:
console_hex_error	log.c	/^static void console_hex_error(uint8_t *hex, size_t len, const char *fmt, ...) {$/;"	f	file:
console_hex_fatal	log.c	/^static void console_hex_fatal(uint8_t *hex, size_t len, const char *fmt, ...) {$/;"	f	file:
console_hex_info	log.c	/^static void console_hex_info(uint8_t *hex, size_t len, const char *fmt, ...) {$/;"	f	file:
console_info	log.c	/^static void console_info(const char *fmt, ...) {$/;"	f	file:
console_log	log.c	/^static void console_log(int lv, const char *fmt, va_list ap, $/;"	f	file:
context	match.h	/^	void *context;$/;"	m	struct:Match_module_t
context	output.h	/^	void *context;$/;"	m	struct:Output_module_t
context	parser.h	/^	void *context;$/;"	m	struct:Config_module_t
cv_arr_def	parser.h	17;"	d
cv_def	parser.h	11;"	d
cv_disable	parser.h	27;"	d
cv_disable	parser.h	30;"	d
cv_enable	parser.h	24;"	d
cv_enabled	parser.h	21;"	d
d	log.h	/^	void (*d)(const char *fmt, ...);$/;"	m	struct:log_ctx
data	parser.h	/^	uint8_t *data;$/;"	m	struct:Tag_t
debug_action	parser.c	/^void debug_action(Action_t *action)$/;"	f
debug_config	parser.c	/^void debug_config(Config_t *config)$/;"	f
do_match	match.c	/^Config_t *do_match(Config_t *config, void *h80211)$/;"	f
do_output	output.c	/^void do_output(Config_t *config)$/;"	f
dwell	parser.h	/^	uint32_t dwell;$/;"	m	struct:Action_t
e	log.h	/^	void (*e)(const char *fmt, ...);$/;"	m	struct:log_ctx
echo	log.c	/^struct log_ctx echo = {$/;"	v	typeref:struct:log_ctx
enable	parser.h	/^	uint8_t enable;$/;"	m	struct:Action_t
extract_max_action	parser.c	/^static Action_t *extract_max_action(Action_t **first)$/;"	f	file:
f	log.h	/^	void (*f)(const char *fmt, ...);$/;"	m	struct:log_ctx
free_actions	parser.c	/^void free_actions(Action_t *action)$/;"	f
free_config	parser.c	/^void free_config(Config_t *config)$/;"	f
free_config_modules	parser.c	/^void free_config_modules(Config_module_t *mod)$/;"	f
free_tags	parser.c	/^void free_tags(Tag_t *tag)$/;"	f
h80211_match	match_modules/h80211_match.c	/^static Config_t *h80211_match(Config_t *config, void *h80211)$/;"	f	file:
hd	log.h	/^	void (*hd)(uint8_t *hex, size_t len, const char *fmt, ...);$/;"	m	struct:log_ctx
he	log.h	/^	void (*he)(uint8_t *hex, size_t len, const char *fmt, ...);$/;"	m	struct:log_ctx
hf	log.h	/^	void (*hf)(uint8_t *hex, size_t len, const char *fmt, ...);$/;"	m	struct:log_ctx
hi	log.h	/^	void (*hi)(uint8_t *hex, size_t len, const char *fmt, ...);$/;"	m	struct:log_ctx
i	log.h	/^	void (*i)(const char *fmt, ...);$/;"	m	struct:log_ctx
init_config_modules	parser.c	/^void init_config_modules()$/;"	f
init_h80211_match_module	match_modules/h80211_match.c	/^void init_h80211_match_module()$/;"	f
init_match_modules	match.c	/^void init_match_modules()$/;"	f
init_output_modules	output.c	/^void init_output_modules()$/;"	f
init_xml_config_module	parser_modules/xml_parser.c	/^void init_xml_config_module()$/;"	f
len	parser.h	/^	uint8_t len;$/;"	m	struct:Tag_t
load	parser.h	/^	Load_func_t load;                     \/\/ load config from file.$/;"	m	struct:Config_module_t
load_config	parser.c	/^Config_t *load_config(const char *config_name, const char *args)$/;"	f
log_ctx	log.h	/^struct log_ctx {$/;"	s
log_level	log.c	/^int log_level = L_ALL;$/;"	v
mac_cmp	format.h	17;"	d
mac_cmp_bcast	format.h	18;"	d
mac_cmp_null	format.h	19;"	d
mac_copy	format.h	21;"	d
mac_copy_bcast	format.h	22;"	d
mac_copy_null	format.h	23;"	d
mac_t	format.h	/^typedef uint8_t mac_t[6];$/;"	t
main	test.c	/^int main()$/;"	f
match	match.h	/^	Match_func_t match;$/;"	m	struct:Match_module_t
match_config	match_modules/h80211_match.c	/^static Config_t *match_config(Config_t *config, void *h80211)$/;"	f	file:
match_name	match.h	/^	char *match_name;$/;"	m	struct:Match_module_t
max_dwell_action	parser.c	/^Action_t *max_dwell_action(Config_t *config)$/;"	f
next	match.h	/^	struct Match_module_t *next;$/;"	m	struct:Match_module_t	typeref:struct:Match_module_t::Match_module_t
next	output.h	/^	struct Output_module_t *next;$/;"	m	struct:Output_module_t	typeref:struct:Output_module_t::Output_module_t
next	parser.h	/^	struct Action_t *next;$/;"	m	struct:Action_t	typeref:struct:Action_t::Action_t
next	parser.h	/^	struct Config_module_t *next;$/;"	m	struct:Config_module_t	typeref:struct:Config_module_t::Config_module_t
next	parser.h	/^	struct Tag_t *next;$/;"	m	struct:Tag_t	typeref:struct:Tag_t::Tag_t
no	parser.h	/^	uint32_t no;				\/\/ sequence number$/;"	m	struct:Action_t
oui_t	format.h	/^typedef uint8_t oui_t[3];$/;"	t
output	output.h	/^	Output_func_t output;$/;"	m	struct:Output_module_t
output_name	output.h	/^	char *output_name;$/;"	m	struct:Output_module_t
register_config_module	parser.c	/^void register_config_module(const char *config_name, Load_func_t load, void *context)$/;"	f
register_match_module	match.c	/^void register_match_module($/;"	f
register_output_module	output.c	/^void register_output_module($/;"	f
sort_actions	parser.c	/^static void sort_actions(Action_t **action)$/;"	f	file:
tag	parser.h	/^	uint8_t tag;$/;"	m	struct:Tag_t
tags	parser.h	/^	struct Tag_t *tags;$/;"	m	struct:Action_t	typeref:struct:Action_t::Tag_t
version	parser.h	/^	uint32_t version;  \/\/ config version$/;"	m	struct:Config_t
xml_action_parser	parser_modules/xml_parser.c	/^static Action_t *xml_action_parser(const char *filename, ezxml_t xml)$/;"	f	file:
xml_config_load	parser_modules/xml_parser.c	/^static Config_t *xml_config_load(const char *filename, void *context)$/;"	f	file:
xml_config_parser	parser_modules/xml_parser.c	/^static Config_t *xml_config_parser(const char *filename, ezxml_t xml)$/;"	f	file:
